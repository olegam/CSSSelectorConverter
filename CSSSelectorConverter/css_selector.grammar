/*
A CSS Selector to XPath Selector Grammar
*/
@symbols = '=' '~=' '|=' ':';

@start
@before{
  PKTokenizer *t = self.tokenizer;
  [t.symbolState add:@"~="];
  [t.symbolState add:@"|="];
  [t.symbolState add:@":"];
}                       = selectorsGroup;

selectorsGroup          = selector ( ','! selector )* {
  PUSH_SELECTORS_GROUP();
};

selector                = simpleSelectorSequence ((combinator {
  PUSH_COMBINATOR();
} simpleSelectorSequence) | simpleSelectorSequence)* {
  PUSH_SELECTORS();
};

simpleSelectorSequence  = (universalSelector | typeSelector)? (classSelector | idSelector | attributeSelector | pseudoSelector)* {
  PUSH_SELECTOR_SEQUENCE();
};

attributeSelector       = '['! Word (Empty | ((equal | includes | dashmatch) QuotedString )) ']'! {
  PUSH_ATTRIBUTE();
};

pseudoSelector          = ':'! (nthChild {
  PUSH_PSEUDO_CLASS();
}| ( Word | '-')+ {
  PUSH_PSEUDO_CLASS();
});

nthChild = nthChildName '(' nth ')';

nth = ( sign? Number? Word (sign Number)? ) | (sign? Number) | even | odd;

dimension = Number Word;

classSelector           = '.'! Word {
  PUSH_CSS_CLASS(POP_STR());
};

idSelector              = '#'! Word {
  PUSH_CSS_ID(POP_STR());
};

typeSelector            = Word {
  PUSH_CSS_TYPE(POP_STR());
};

universalSelector       = '*'! {
  PUSH_CSS_UNIVERSAL();
};

nthChildName            = 'nth-child';
odd                     = 'odd';
even                    = 'even';
combinator              = '>' | '+' ;
sign                    = '-' | '+';
equal                   = "=";
includes                = "~=";
dashmatch               = "|=";

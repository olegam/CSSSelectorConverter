/*
A CSS Selector to XPath Selector Grammar
*/
@start
@before{
  PKTokenizer *t = self.tokenizer;
  [t.symbolState add:@"~="];
  [t.symbolState add:@"|="];
  [t.symbolState add:@":"];
  [t.symbolState add:@"-"];
  [t.wordState setWordChars:NO from:'-' to:'-'];
  [t.numberState setAllowsScientificNotation:NO];
  [t.numberState setAllowsTrailingDecimalSeparator:NO];

}                       = selectorsGroup;

selectorsGroup          = selector ( ','! selector )* {
  PUSH_SELECTORS_GROUP();
};

selector                = simpleSelectorSequence ((combinator {
  PUSH_COMBINATOR();
} simpleSelectorSequence) | simpleSelectorSequence)* {
  PUSH_SELECTORS();
};

simpleSelectorSequence  = (universalSelector | typeSelector)? (classSelector | idSelector | attributeSelector | pseudoSelector)* {
  PUSH_SELECTOR_SEQUENCE();
};

attributeSelector       = '['! Word (Empty | ((equal | includes | dashmatch) QuotedString )) ']'! {
  PUSH_ATTRIBUTE();
};

pseudoSelector          = ':'! ( (nthChild)  | ( Word | '-')+ {
  PUSH_PSEUDO_CLASS();
});

nthChild = nthChildName '('! nth ')'!  {
  PUSH_NTH_CHILD();
};

nth = (  Number? nthChildConstant (sign? Number)? ) | Number | even | odd  ;

dimension = Number Word;

classSelector           = '.'! Word {
  PUSH_CSS_CLASS(POP_STR());
};

idSelector              = '#'! Word {
  PUSH_CSS_ID(POP_STR());
};

typeSelector            = Word {
  PUSH_CSS_TYPE(POP_STR());
};

universalSelector       = '*'! {
  PUSH_CSS_UNIVERSAL();
};

nthChildName            = nthConstant minus childConstant;
nthChildConstant        = 'n';
nthConstant             = 'nth';
childConstant           = 'child';
odd                     = 'odd';
even                    = 'even';
combinator              = '>' | plus ;
sign                    = minus | plus;
plus                    = '+';
minus                   = '-';
equal                   = "=";
includes                = "~=";
dashmatch               = "|=";
